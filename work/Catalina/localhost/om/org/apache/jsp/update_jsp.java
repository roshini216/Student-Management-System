/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-01-28 20:32:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class update_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

String rollno1 = request.getParameter("rollno");

      out.write('\r');
      out.write('\n');

try{
    DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());
    String url1 = "jdbc:mysql://localhost:3306/kc_5jan23";
    Connection con1 = DriverManager.getConnection(url1,"root","abc456");
    String sql1 = "select * from  student where rollno="+rollno1;
    Statement stmt = con1.createStatement();
    ResultSet rs = stmt.executeQuery(sql1);
while(rs.next()){

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        <title> Student Management System</title>\r\n");
      out.write("        <style>\r\n");
      out.write("            *{font-size: 20px;}\r\n");
      out.write("            /* body{background-color:rgb(90, 235, 240);}\r\n");
      out.write("            .nav{background-color:black;}\r\n");
      out.write("            .nav a {color:white;text-decoration:none;margin:5%;} */\r\n");
      out.write("            .heading{\r\n");
      out.write("                font-family:'M PLUS Rounded 1c', sans-serif ;\r\n");
      out.write("                font-size: 30px;\r\n");
      out.write("                color: aqua;\r\n");
      out.write("                text-shadow: 4px 4px black;\r\n");
      out.write("                padding-bottom:0%;\r\n");
      out.write("                \r\n");
      out.write("                left:15px;\r\n");
      out.write("            }\r\n");
      out.write("           \r\n");
      out.write("            body{background-image:url(homeimg.jpeg);\r\n");
      out.write("                background-position: center;\r\n");
      out.write("                background-repeat: no-repeat; \r\n");
      out.write("                 background-size: cover; \r\n");
      out.write("                }\r\n");
      out.write("               .nav{width: 100%;display:flex;}\r\n");
      out.write("               .nav a {color:white;text-decoration:none;margin:1%;}\r\n");
      out.write("               .form,.left,.right\r\n");
      out.write("               {\r\n");
      out.write("                 font-size: 20px; \r\n");
      out.write("                 text-align: left;\r\n");
      out.write("                 color: white;\r\n");
      out.write("                 font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n");
      out.write("                 font-weight: bold;\r\n");
      out.write("                 \r\n");
      out.write("                \r\n");
      out.write("               }\r\n");
      out.write("               input{\r\n");
      out.write("                width:100%;\r\n");
      out.write("                padding: 5px;\r\n");
      out.write("                margin: 2px 1px;\r\n");
      out.write("                background-color:rgb(133, 209, 235);\r\n");
      out.write("               }\r\n");
      out.write("               ::placeholder{\r\n");
      out.write("                color:black;\r\n");
      out.write("                font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n");
      out.write("               }\r\n");
      out.write("\r\n");
      out.write("        </style>\r\n");
      out.write(" 	<link rel = \"icon\" href = \"student.ico\"/>\r\n");
      out.write("     <link href=\"https://fonts.googleapis.com/css2?family=Luckiest+Guy&family=M+PLUS+Rounded+1c:wght@300;500&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("    </head>\r\n");
      out.write("<body>\r\n");
      out.write("    <center>\r\n");
      out.write("        <div class = \"nav\">\r\n");
      out.write("            <span style=\"margin:1%;\">\r\n");
      out.write("            <a href = \"home.jsp\">Home</a>\r\n");
      out.write("            </span>\r\n");
      out.write("            <span style=\"margin: 1%;\">\r\n");
      out.write("            <a href = \"create.jsp\">Create</a>\r\n");
      out.write("            </span>\r\n");
      out.write("           \r\n");
      out.write("            <span style=\"text-align:right;margin:1%;\">\r\n");
      out.write("            \r\n");
      out.write("        </div>\r\n");
      out.write("<h1 class=\"heading\">UPDATE DATA</h1>\r\n");
      out.write("\r\n");
      out.write("<form method=\"post\" action=\"update.jsp\">\r\n");
      out.write("<div class = \"left\"style = \"float: left;margin-left:10%;\">\r\n");
      out.write("Roll no :<input type=\"text\" name=\"rollno\" required value=\"");
      out.print(rs.getString("rollno") );
      out.write("\">\r\n");
      out.write("<br/><br/>\r\n");
      out.write("\r\n");
      out.write("First Name: <input type=\"text\" name=\"firstname\" pattern = \"[a-zA-Z][a-zA-Z]+\"  required value=\"");
      out.print(rs.getString("firstname") );
      out.write("\">\r\n");
      out.write("<br/><br/>\r\n");
      out.write("Last Name: <input type=\"text\" name=\"lastname\" pattern = \"[a-zA-Z][a-zA-Z]+\" required value=\"");
      out.print(rs.getString("lastname") );
      out.write("\">\r\n");
      out.write("<br><br/>\r\n");
      out.write("Address: <input type=\"text\" name=\"address\" required value=\"");
      out.print(rs.getString("address") );
      out.write("\">\r\n");
      out.write("<br><br/>\r\n");
      out.write("Phone no :<input type=\"number\" name=\"phoneno\"required value=\"");
      out.print(rs.getString("phoneno") );
      out.write("\">\r\n");
      out.write("<br><br/>\r\n");
      out.write("Semester :<input type=\"text\" name=\"semester\"required value=\"");
      out.print(rs.getString("semester") );
      out.write("\">\r\n");
      out.write("<br><br/>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"right\" style = \"float: right;margin-right:10%;\">\r\n");
      out.write("First Subject :<input type=\"text\" name=\"subject1\" required value=\"");
      out.print(rs.getString("subject1") );
      out.write("\">\r\n");
      out.write("<br><br/>\r\n");
      out.write("Marks :<input type=\"number\" name=\"marks1\"  required min = \"0\" max = \"100\"value=\"");
      out.print(rs.getString("marks1") );
      out.write("\">\r\n");
      out.write("<br><br/>\r\n");
      out.write("Second Subject :<input type=\"text\" name=\"subject2\" required value=\"");
      out.print(rs.getString("subject2") );
      out.write("\">\r\n");
      out.write("<br><br/>\r\n");
      out.write("Marks :<input type=\"number\" name=\"marks2\" required min = \"0\" max = \"100\" value=\"");
      out.print(rs.getString("marks2") );
      out.write("\">\r\n");
      out.write("<br><br/>\r\n");
      out.write("Third Subject :<input type=\"text\" name=\"subject3\" required value=\"");
      out.print(rs.getString("subject3") );
      out.write("\">\r\n");
      out.write("<br><br/>\r\n");
      out.write("Marks :<input type=\"number\" name=\"marks3\" required min = \"0\" max = \"100\" value=\"");
      out.print(rs.getString("marks3") );
      out.write("\">\r\n");
      out.write("<br><br/>\r\n");
      out.write("<script>\r\n");
      out.write("    const input = document.querySelector('input[name=\"firstname\"]');\r\n");
      out.write("\r\n");
      out.write("    input.addEventListener('invalid', function (event) {\r\n");
      out.write("     if (event.target.validity.patternMismatch) {\r\n");
      out.write("    event.target.setCustomValidity('First Name should be min 2 alphabets and only alphabets.');\r\n");
      out.write("     }\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("input.addEventListener('change', function (event) {\r\n");
      out.write("event.target.setCustomValidity('');\r\n");
      out.write("})\r\n");
      out.write("const input2 = document.querySelector('input[name=\"lastname\"]');\r\n");
      out.write("\r\n");
      out.write("    input2.addEventListener('invalid', function (event) {\r\n");
      out.write("     if (event.target.validity.patternMismatch) {\r\n");
      out.write("    event.target.setCustomValidity('Last Name should be min 2 alphabets and  only alphabets.');\r\n");
      out.write("     }\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("input2.addEventListener('change', function (event) {\r\n");
      out.write("event.target.setCustomValidity('');\r\n");
      out.write("})\r\n");
      out.write("</script>\r\n");
      out.write("</div>\r\n");
      out.write("<br><br/>\r\n");
      out.write("<input type = \"submit\"style = \"margin-top:33%;font-size: 20px;width: 140px;background-color: white;\r\n");
      out.write("color:black;font-weight: bold;font-family:'M PLUS Rounded 1c', sans-serif ;\"\r\n");
      out.write(" value=\"Save\" name = \"btn\"/>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
 
if(request.getParameter("btn")!= null){
String rollno = request.getParameter("rollno");
String firstname = request.getParameter("firstname");
String lastname = request.getParameter("lastname");
String address = request.getParameter("address");
String phoneno = request.getParameter("phoneno");
String semester = request.getParameter("semester");
String subject1 = request.getParameter("subject1");
double marks1= Double.parseDouble(request.getParameter("marks1"));
String subject2= request.getParameter("subject2");
double marks2= Double.parseDouble(request.getParameter("marks2"));
String subject3 = request.getParameter("subject3");
double marks3= Double.parseDouble(request.getParameter("marks3"));
double avg = (marks1+marks2+marks3)/3.0;


if(firstname.length()<2)
{
   
   out.println("<h2 style = \"color : white;\">first name should be min of 2 characters</h2>");
   return;
}
if(lastname.length()<2)
{
    out.println("<h2 style = \"color : white;\">Last name should be min of 2 characters</h2>");
    return;
}
if(address.length()<3)
{
    out.println("<h2 style = \"color : white;\" >Address should be min of 3 characters</h2>");
    return;
}

if(rollno!= null )
{

int personRollno = Integer.parseInt(rollno);
try
{
    DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());
    String url = "jdbc:mysql://localhost:3306/kc_5jan23";

    Connection con = DriverManager.getConnection(url,"root","abc456");
    String sql="Update student set rollno=?,firstname=?,lastname=?,address=?,phoneno=?,semester=?,subject1=?,marks1=?,subject2=?,marks2=?,subject3=?,marks3=?,avg=? where rollno="+rollno;
    PreparedStatement pst = con.prepareStatement(sql);
    pst.setString(1,rollno);
    pst.setString(2, firstname);
    pst.setString(3, lastname);
    pst.setString(4, address);
    pst.setString(5, phoneno);
    pst.setString(6, semester);
    pst.setString(7, subject1);
    pst.setDouble(8, marks1);
    pst.setString(9, subject2);
    pst.setDouble(10, marks2);
    pst.setString(11, subject3);
    pst.setDouble(12, marks3);
    pst.setDouble(13,avg);
   
    int i = pst.executeUpdate();
    con.close();
 
if(i > 0)
{
      out.write("\r\n");
      out.write("<div style=\"size: 20px; color: white;\"><h2 >Record Updated Successfully</h2></div>\r\n");

}
else
{
out.print("There is a problem in updating Record.");
} 
}
catch(SQLException sql)
{
request.setAttribute("error", sql);
out.println(sql);
}
}}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

}

} catch(SQLException err)
{
    out.println("issue" +err);
}


      out.write("\r\n");
      out.write("\r\n");
      out.write("    </center>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
